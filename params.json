{
  "name": "IDES Data Preparation - OpenSSL",
  "tagline": "Decrypting notifications received from IDES with OpenSSL",
  "body": "## IDES Data Preparation\r\n\r\nThe International Data Exchange Service (IDES) is a secure managed file transfer service that allows financial institutions and tax authorities to securely send information on financial accounts held by U.S. taxpayers in accordance with the Foreign Account Tax Compliance Act (FATCA). Files transmitted via IDES must be encrypted and packaged in accordance with published data preparation instructions. The data preparation process is an important step to ensure that information transmitted via IDES conforms to U.S security standards to safeguard sensitive information.\r\n\r\nThe IDES Data Preparation OpenSSL project repository demonstrates the commands necessary to decrypt notifications downloaded from the IDES portal. The included commands are Windows specific, Linux specific, and a process that includes manual editing that will work for those and other systems.\r\n\r\nThe sample commands are intended to be run from a batch file located along with the OpenSSL executable, the Key and Payload files from the notification, and the receiver's private key. \r\n\r\nPlease note that there are many open market tools that produce the same results; however, the IRS does not endorse any commercial products, including the frameworks used in the example. \r\n\r\n### CBC Encryption - Windows Batch Scripting\r\n\r\nThe following code should be placed into a batch file and run in the same folder as the openssl executable. \r\n\r\nThe following files are required and the filename in the batch script will need to be replaced with your filename for each:\r\n\r\ncbctest_public.pem - This will be the IRS Public Key for upload into IDES. A copy of this test key is included in the repository for testing these commands. The .p12 this was created from is included as well with a password of \"password\".<br>\r\nPAYLOAD.ZIP - This is the Payload file that will be uploaded to IDES<br>\r\n\r\nA random 48 byte value will be created that will be used to create the AES key and the IV. The first command will encrypt the Payload and will use parsed values from the random 48 byte value. The second command will encrypt the 48 byte value that contains the AES key and the IV. The output from these commands will be the encrypted Payload and the encrypted Key file. \r\n\r\n```\r\n\r\nsetlocal enabledelayedexpansion\r\n\r\nopenssl rand 48 > 48byterandomvalue.bin\r\nhexdump /bare 48byterandomvalue.bin > 48byterandomvalue.txt\r\n\r\nset /a counter=0\r\nfor /f \"tokens=* delims= \" %%i in (48byterandomvalue.txt) do (\r\nset /a counter=!counter!+1\r\nset var=%%i\r\nif \"!counter!\"==\"1\" (set aes1=%%i)\r\nif \"!counter!\"==\"2\" (set aes2=%%i)\r\nif \"!counter!\"==\"3\" (set iv=%%i)\r\n)\r\n\r\nset result1=%aes1:~0,50%\r\nset result1=%result1: =%\r\nset result2=%aes2:~0,50%\r\nset result2=%result2: =%\r\nset aeskey=%result1%%result2%\r\nset initvector=%iv:~0,50%\r\nset initvector=%initvector: =%\r\n\r\nopenssl aes-256-cbc -e -in PAYLOAD.zip -out PAYLOAD -K %aeskey% -iv %initvector%\r\n\r\nopenssl rsautl -encrypt -certin -inkey cbctest_public.pem -in 48byterandomvalue.bin -out 000000.00000.TA.840_Key\r\n\r\n```\r\n \r\n\r\nRunning the batch file:\r\n![Image 1](http://irsgov.github.io/IDES-Data-Preparation-OpenSSL/images/cbc_encrypt_windows.png)\r\nFigure 1\r\n\r\n### CBC Decryption - Windows Batch Scripting\r\n\r\nThe following code should be placed into a batch file and run in the same folder as the openssl executable. \r\n\r\nThe following files are required and the filename in the batch script will need to be replaced with your filename for each:\r\n\r\nKEYFILE - this is the Key file that will be in the downloaded notification .zip file, 000000.00000.TA.840_Key for example<br>\r\ncbctest_private.pem - This will be your private key that corresponds to the certificate that was uploaded into IDES. A copy of this test key is included in the repository for testing these commands. The .p12 this was created from is included as well with a password of \"password\". <br>\r\nPAYLOAD - this is the Payload file that will be in the downloaded notification .zip file<br>\r\n\r\nThe first command will decrypt the 48 byte value which contains the AES key and the IV. The batch code will parse the hex values of the AES key and IV to prepare it for the second command. The second command will use the AES key and IV in hex format and decrypt the Payload file. The output will be the decrypted Payload .zip file.\r\n\r\n```\r\n\r\nsetlocal enabledelayedexpansion\r\n\r\nopenssl rsautl -decrypt -hexdump -in KEYFILE -inkey cbctest_private.pem -out aeskeyandiv.txt\r\n\r\nset /a counter=0\r\nfor /f \"tokens=* delims= \" %%i in (aeskeyandiv.txt) do (\r\nset /a counter=!counter!+1\r\nset var=%%i\r\nif \"!counter!\"==\"1\" (set aes1=%%i)\r\nif \"!counter!\"==\"2\" (set aes2=%%i)\r\nif \"!counter!\"==\"3\" (set iv=%%i)\r\n)\r\n\r\nset result1=%aes1:~7,48%\r\nset result1=%result1: =%\r\nset result1=%result1:-=%\r\nset result2=%aes2:~7,48%\r\nset result2=%result2: =%\r\nset result2=%result2:-=%\r\nset aeskey=%result1%%result2%\r\nset initvector=%iv:~7,48%\r\nset initvector=%initvector: =%\r\nset initvector=%initvector:-=%\r\n\r\nopenssl aes-256-cbc -d -in PAYLOAD -out PAYLOADOUT.zip -K %aeskey% -iv %initvector%\r\n\r\n```\r\n \r\n\r\nRunning the batch file:\r\n![Image 1](http://irsgov.github.io/IDES-Data-Preparation-OpenSSL/images/cbc_decrypt_windows.png)\r\nFigure 1\r\n\r\n\r\n### CBC Encryption - Linux Shell Scripting\r\n\r\nSimilar to the Windows method above, the following code should be placed into a shell script and run in the same folder as the openssl executable. \r\n\r\nThe following files are required and the file names passed to the batch script will need to be replaced with your filename for each:\r\n\r\nRECEIVER_PUBLIC_KEY - This will be the IRS Public Key for upload into IDES. A test key for this has been included in the repository.\r\nSENDER_PAYLOAD_IN - This is the Payload file that will be uploaded to IDES\r\nENCRYPTED_PAYLOAD_TO_SEND_OUT - This is the name of the encrypted Payload file that will be created\r\nENCRYPTED_AES_IV_TO_SEND_OUT - This is the name of the encrypted Key file that will be created\r\n\r\n```\r\n#!/bin/bash\r\n#\r\n# @author       Subir Paul (IT:ES:SE:PE)\r\n#\r\n#\r\n\r\nSCRIPT=$0\r\nfunction usage {\r\n  printf 'Usage: %s -pubkey <receiver public key pem input file> -in <plain text input file> [-aeskeyiv <encrypted aeskey+iv output file>] [-out <cipher text output file>\\n' $SCRIPT\r\n  exit 1\r\n}\r\n\r\nif [ $# -le 1 ]; then \r\n  usage\r\nfi\r\n\r\n# Reset all variables that might be set\r\nINFILE=\r\nOUTFILE=\r\nPUBKEY=\r\nAESKEYIV=\r\n\r\n# Read command line args\r\nwhile :; do\r\n  case $1 in\r\n    -h|--help) \r\n    usage \r\n    ;;\r\n    -in|--in) \r\n      if [ -n \"$2\" ]; then\r\n        INFILE=$2\r\n        shift\r\n      else\r\n        printf 'ERROR: \"-in\" requires a non-empty option argument.\\n' >&2\r\n        exit 1\r\n      fi\r\n      ;;\r\n    -pubkey|--pubkey) \r\n      if [ -n \"$2\" ]; then\r\n        PUBKEY=$2\r\n        shift\r\n      else\r\n        printf 'ERROR: \"-pubkey\" requires a non-empty option argument.\\n' >&2\r\n        exit 1\r\n      fi\r\n      ;;\r\n    -aeskeyiv|--aeskeyiv) \r\n      if [ -n \"$2\" ]; then\r\n        AESKEYIV=$2\r\n        shift\r\n      fi\r\n      ;;\r\n    -out|--out) \r\n      if [ -n \"$2\" ]; then\r\n        OUTFILE=$2\r\n        shift\r\n      fi\r\n      ;;\r\n    --)  # End of all options.\r\n      shift\r\n      break\r\n      ;;\r\n    -?*)\r\n      printf 'WARN: Unknown option (ignored): %s\\n' \"$1\" >&2\r\n      ;;\r\n    *) # Default case: If no more options then break out of the loop.\r\n      break\r\n  esac\r\n  shift\r\ndone\r\n\r\nif [ -z \"$PUBKEY\" ]; then\r\n  printf 'missing -pubkey <receiver public key pem input file>\\n'\r\n  usage\r\nfi\r\nif [ ! -f $PUBKEY ]; then\r\n  printf 'missing receiver public key input file %s\\n' $PUBKEY\r\n  exit 1\r\nfi\r\nif [ -z \"$INFILE\" ]; then\r\n  printf 'missing -in <plain text input file>\\n'\r\n  usage\r\nfi\r\nif [ ! -f $INFILE ]; then\r\n  printf 'missing plain text input file %s\\n' $INFILE\r\n  exit 1\r\nfi\r\nif [ -z \"$OUTFILE\" ]; then\r\n  OUTFILE=`echo $INFILE.out`\r\nfi\r\nif [ -z \"$AESKEYIV\" ]; then\r\n  AESKEYIV=`echo $INFILE.aeskeyiv`\r\nfi\r\n\r\necho \"pubkey=$PUBKEY infile=$INFILE aeskeyiv=$AESKEYIV outfile=$OUTFILE\" \r\n\r\n# Create 32 bytes random AES key\r\nTMP=`openssl rand 32 -hex`\r\nAESKEY=`echo ${TMP:0:64}`\r\n\r\n# Create 16 bytes random Initialization Vector (IV)\r\nTMP=`openssl rand 16 -hex`\r\nIV=`echo ${TMP:0:32}`\r\n\r\n# Encrypt payload with key AESKEY and iv IV\r\nopenssl enc -e -aes-256-cbc -in $INFILE -out $OUTFILE -K $AESKEY -iv $IV\r\n\r\n# Concatenate 32 bytes AESKEY and 16 bytes IV\r\nTMP=`echo -n $AESKEY$IV`\r\n\r\n# Convert AESKEY+IV hex to binary\r\nAESKEYIVBIN=`echo $AESKEYIV.bin`\r\necho -n $TMP|perl -pe '$_=pack(\"H*\",$_)' > $AESKEYIVBIN\r\n\r\n# Encrypt aeskey_iv.bin with receiver's RSA PKI public key\r\nopenssl rsautl -encrypt -out $AESKEYIV -pubin -inkey $PUBKEY -in $AESKEYIVBIN\r\n\r\n#delete AESKEYIVBIN\r\nif [ -f $AESKEYIVBIN ]; then\r\n  rm -f $AESKEYIVBIN\r\nfi\r\n\r\n# Check if OUTFILE and AESKEYIV are created\r\nif [ -f $OUTFILE ] && [ -f $AESKEYIV ]; then\r\n  echo \"Cipher text payload file=$OUTFILE and aes key file=$AESKEYIV created\"\r\nfi\r\n\r\n```\r\n\r\nAn example of running the script with the required parameters:\r\n```\r\ndecrypt.sh privatekey.pem 000000.00000.TA.124_Key 000000.00000.TA.840_Payload 000000.00000.TA.840_Payload.zip\r\n\r\n```\r\n\r\n### CBC Decryption - Linux Shell Scripting\r\n\r\nSimilar to the Windows method above, the following code should be placed into a shell script and run in the same folder as the openssl executable. \r\n\r\nThe following files are required and the file names passed to the batch script will need to be replaced with your filename for each:\r\n\r\nRECEIVER_PRIVATE_KEY - This will be your private key that corresponds to the certificate that was uploaded into IDES. A copy of this test key is included in the repository for testing these commands.\r\nRECEIVED_ENCRYPTED_PAYLOAD_IN - this is the Payload file that will be in the downloaded notification .zip file\r\nRECEIVED_ENCRYPTED_AES_IV_IN - this is the Key file that will be in the downloaded notification .zip file, 000000.00000.TA.840_Key for example\r\nDECRYPTED_PAYLOAD_OUT - this is the name of the decrypted output file\r\n\r\n```\r\n#!/bin/bash\r\n#\r\n# @author       Subir Paul (IT:ES:SE:PE)\r\n#\r\n#\r\n\r\nSCRIPT=$0\r\nfunction usage {\r\n  printf 'Usage: %s -privatekey <receiver private key pem input file> -in <cipher text input file> [-aeskeyiv <encrypted aes+iv input file>] [-out <plain text output file>]\\n' $SCRIPT\r\n  exit 1\r\n}\r\n\r\n# Reset all variables that might be set\r\nINFILE=\r\nOUTFILE=\r\nPRIVATEKEY=\r\nAESKEYIV=\r\n\r\n# Read command line args\r\nwhile :; do\r\n  case $1 in\r\n    -h|--help) \r\n      usage \r\n      ;;\r\n    -in|--in) \r\n      if [ -n \"$2\" ]; then\r\n        INFILE=$2\r\n        shift\r\n      else\r\n        printf 'ERROR: \"-in\" requires a non-empty option argument.\\n' >&2\r\n        exit 1\r\n      fi\r\n      ;;\r\n    -aeskeyiv|--aeskeyiv) \r\n      if [ -n \"$2\" ]; then\r\n        AESKEYIV=$2\r\n        shift\r\n      else\r\n        printf 'ERROR: \"-aeskeyiv\" requires a non-empty option argument.\\n' >&2\r\n        exit 1\r\n      fi\r\n      ;;\r\n    -privatekey|--privatekey) \r\n      if [ -n \"$2\" ]; then\r\n        PRIVATEKEY=$2\r\n        shift\r\n      else\r\n        printf 'ERROR: \"-privatekey\" requires a non-empty option argument.\\n' >&2\r\n        exit 1\r\n      fi\r\n      ;;\r\n    -out|--out) \r\n      if [ -n \"$2\" ]; then\r\n        OUTFILE=$2\r\n        shift\r\n      fi\r\n      ;;\r\n    --)  # End of all options.\r\n      shift\r\n      break\r\n      ;;\r\n    -?*)\r\n      printf 'WARN: Unknown option (ignored): %s\\n' \"$1\" >&2\r\n      ;;\r\n    *) # Default case: If no more options then break out of the loop.\r\n      break\r\n  esac\r\n  shift\r\ndone\r\n\r\nif [ -z \"$PRIVATEKEY\" ]; then\r\n  printf 'missing -privatekey <receiver private key pem input file>\\n'\r\n  usage\r\nfi\r\nif [ ! -f $PRIVATEKEY ]; then\r\n  printf 'missing receiver private key pem input file %s\\n' $PRIVATEKEY\r\n  exit 1\r\nfi\r\nif [ -z \"$INFILE\" ]; then\r\n  printf 'missing -in <cipher text input file>\\n'\r\n  usage\r\nfi\r\nif [ ! -f $INFILE ]; then\r\n  printf 'missing cipher text input file %s\\n' $INFILE\r\n  exit 1\r\nfi\r\nif [ -z \"$AESKEYIV\" ]; then\r\n  printf 'missing -aeskeyiv <encrypted aes+iv input file>\\n'\r\n  usage\r\nfi\r\nif [ ! -f $AESKEYIV ]; then\r\n  printf 'missing encrypted aes+iv input file %s\\n' $AESKEYIV\r\n  exit 1\r\nfi\r\nif [ -z \"$OUTFILE\" ]; then\r\n  OUTFILE=`echo $INFILE.out`\r\nfi\r\n\r\necho \"privatekey=$PRIVATEKEY infile=$INFILE aeskeyiv=$AESKEYIV outfile=$OUTFILE\" \r\n\r\n# Decrypt encrypted AESKEY+IV using receiver's RSA PKI private key\r\nTMP=`openssl rsautl -decrypt -in $AESKEYIV -inkey $PRIVATEKEY | perl -pe '$_=unpack(\"H*\",$_)'`\r\n\r\n# Extract 32 bytes AESKEY and 16 bytes IV\r\nAESKEY2DECRYPT=`echo ${TMP:0:64}`\r\nIV2DECRYPT=`echo ${TMP:64:96}`\r\n\r\n# Decrypt payload using D_AESKEY and D_IV\r\nopenssl enc -d -aes-256-cbc -in $INFILE -out $OUTFILE -K $AESKEY2DECRYPT -iv $IV2DECRYPT \r\n\r\n# Check if OUTFILE are created\r\nif [ -f $OUTFILE ]; then\r\n  echo \"Plain text payload file=$OUTFILE created\"\r\nfi\r\n\r\n\r\n```\r\n\r\n### CBC - Linux Sample Script\r\nAn example of running the encrypt and decrypt scripts with the required parameters:\r\n```\r\n#!/bin/bash\r\n#\r\n# @author       Subir Paul (IT:ES:SE:PE)\r\n#\r\n#\r\n\r\nRECEIVER_PUBLIC_KEY=ReceiverPublicKey.pem\r\nSENDER_PAYLOAD_IN=Sample_000000.00000.TA.124_Payload.signed.xml\r\nENCRYPTED_PAYLOAD_TO_SEND_OUT=000000.00000.TA.124_Payload\r\nENCRYPTED_AES_IV_TO_SEND_OUT=000000.00000.TA.840_Key\r\n\r\n# Usage: ./encrypt.sh\" -pubkey <receiver public key PEM file> -in <plain text file> [-aeskeyiv <encrypted aeskeyiv file>] [-out <cipher text file>\r\n\r\n./encrypt.sh -pubkey $RECEIVER_PUBLIC_KEY -in $SENDER_PAYLOAD_IN -aeskeyiv $ENCRYPTED_AES_IV_TO_SEND_OUT -out $ENCRYPTED_PAYLOAD_TO_SEND_OUT\r\n\r\n\r\nRECEIVER_PRIVATE_KEY=ReceiverPrivateKey.pem\r\nRECEIVED_ENCRYPTED_PAYLOAD_IN=000000.00000.TA.124_Payload\r\nRECEIVED_ENCRYPTED_AES_IV_IN=000000.00000.TA.840_Key\r\nDECRYPTED_PAYLOAD_OUT=000000.00000.TA.124_Payload.decrypted.xml\r\n\r\n# Usage: ./decrypt.sh\" -privatekey <receiver private key PEM file> -in <cipher text file> [-aeskeyiv <encrypted aes+iv file>] [-out <plain text file>]\r\n\r\n./decrypt.sh -in $RECEIVED_ENCRYPTED_PAYLOAD_IN -privatekey $RECEIVER_PRIVATE_KEY -aeskeyiv $RECEIVED_ENCRYPTED_AES_IV_IN -out $DECRYPTED_PAYLOAD_OUT\r\n\r\n\r\n```\r\n\r\n\r\n### CBC - Manual OpenSSL Commands for Encryption and Decryption\r\n\r\nIf you are having trouble with an automated method above, there are additional steps you can take to encrypt or decrypt the AES key, manually get the required hex key data, and use it to decrypt the Payload file. \r\n\r\nCreating the AES Key and IV:\r\n\r\nA random 48 byte value will be created and a hex version will also be created. Both the binary and hex values will be used.\r\n\r\nThe following code should be run in the same folder as the openssl executable and necessary files.\r\n\r\n```\r\nopenssl rand 48 > 48byterandomvalue.bin\r\nhexdump /bare 48byterandomvalue.bin > 48byterandomvalue.txt\r\n```\r\n\r\nCreating the random 48 byte value:\r\n![Image 2](http://irsgov.github.io/IDES-Data-Preparation-OpenSSL/images/CBC_manual1.png)\r\nFigure 2\r\n\r\nThe hexdump flag in the command above will output the key in hexadecimal format which is needed to decrypt the Payload file. However, there is extra information that is included that needs to be removed before it can be used in the next command. You can use a text editor to open the 48byterandomvalue.txt file which is the output of the first command.\r\n\r\nExample Hex data in Notepad++:\r\n![Image 2](http://irsgov.github.io/IDES-Data-Preparation-OpenSSL/images/CBC_manual2.png)\r\nFigure 3\r\n\r\nExample Hex data in Notepad:\r\n![Image 2](http://irsgov.github.io/IDES-Data-Preparation-OpenSSL/images/CBC_manual3.png)\r\nFigure 4\r\n\r\nThe first two lines will become the AES key and the third line will become the IV. The hex content that is needed from the file is bolded below. The rest of the information needs to be removed.\r\n\r\n**7E 39 08 C1  60 BA A8 86  EF 8C DE 3B  E7 A0 0C 79** // ~9..`......;...y\r\n\r\n**0B 20 CC F6  47 3D 89 1A  8F AA F8 6F  3D C1 AC 15** // . ..G=.....o=...\r\n\r\n**39 71 72 82  33 B2 9E AB  2C 3A DD 29  92 4F 91 B1** // 9qr.3...,:.).O..\r\n\r\n\r\n* With the spaces and dashes removed and leftover characters together, the end result is a 64 character string and a 32 character string. The first string must be exactly 64 characters in length and will be the AES key. The second string must be exactly 32 characters in length and will be the IV.\r\n\r\n**7E3908C160BAA886EF8CDE3BE7A00C790B20CCF6473D891A8FAAF86F3DC1AC15**\r\n\r\n**3971728233B29EAB2C3ADD29924F91B1**\r\n\r\nThe first command to encrypt the Payload file can then be executed using the AES and IV hex values. The Payload file to be encrypted is needed as well as the two hex values.\r\n\r\n```\r\nopenssl aes-256-cbc -e -in PAYLOAD.zip -out PAYLOAD -K 7E3908C160BAA886EF8CDE3BE7A00C790B20CCF6473D891A8FAAF86F3DC1AC15 -iv 3971728233B29EAB2C3ADD29924F91B1\r\n```\r\nEncrypting the Payload file:\r\n![Image 2](http://irsgov.github.io/IDES-Data-Preparation-OpenSSL/images/CBC_manual4.png)\r\nFigure 5\r\n\r\nThe second command to encrypt the 48 byte AES key and IV file can then be executed. This will use the initial 48 byte binary file that was created as well as the receiver's public key.\r\n\r\n```\r\nopenssl rsautl -encrypt -certin -inkey cbctest_public.pem -in 48byterandomvalue.bin -out 000000.00000.TA.840_Key\r\n```\r\nEncrypting the Payload file:\r\n![Image 2](http://irsgov.github.io/IDES-Data-Preparation-OpenSSL/images/CBC_manual5.png)\r\nFigure 5\r\n\r\nThe end result of these two commands are the encrypted Payload and Key files needed for the IDES data packet.\r\n\r\n\r\nDecrypting the AES key file:\r\n```\r\nopenssl rsautl -decrypt -hexdump -in 000000.00000.TA.840_Key -inkey cbctest_private.pem -out aeskeyandiv.txt\r\n```\r\n![Image 2](http://irsgov.github.io/IDES-Data-Preparation-OpenSSL/images/CBC_manual6.png)\r\nFigure 6\r\n\r\n\r\nThe hexdump flag in the command above will output the key in hexadecimal format which is needed to decrypt the Payload file. However, there is extra information that is included that needs to be removed before it can be used in the next command. You can use a text editor to open the aeskeyandiv.txt file which is the output of the first command.\r\n\r\nExample Hex data in Notepad++:\r\n![Image 2](http://irsgov.github.io/IDES-Data-Preparation-OpenSSL/images/CBC_manual7.png)\r\nFigure 7\r\n\r\n\r\n\r\nThere are three lines in the file. The first two are the AES key and the third is the IV. The hex content that is needed from the file is bolded below. The rest of the information needs to be removed. \r\n\r\n0000 - **7e 39 08 c1 60 ba a8 86-ef 8c de 3b e7 a0 0c 79**   ~9..`......;...y\r\n\r\n0010 - **0b 20 cc f6 47 3d 89 1a-8f aa f8 6f 3d c1 ac 15**   . ..G=.....o=...\r\n\r\n0020 - **39 71 72 82 33 b2 9e ab-2c 3a dd 29 92 4f 91 b1**   9qr.3...,:.).O..\r\n\r\n\r\n* With the beginning and ending information stripped out.\r\n\r\n**7e 39 08 c1 60 ba a8 86-ef 8c de 3b e7 a0 0c 79**\r\n\r\n**0b 20 cc f6 47 3d 89 1a-8f aa f8 6f 3d c1 ac 15**\r\n\r\n**39 71 72 82 33 b2 9e ab-2c 3a dd 29 92 4f 91 b1**\r\n\r\n* With the spaces and dashes removed and leftover characters together, the end result is a 64 character string and a 32 character string. The first string must be exactly 64 characters in length and will be the AES key. The second string must be exactly 32 characters in length and will be the IV.\r\n\r\n**7E3908C160BAA886EF8CDE3BE7A00C790B20CCF6473D891A8FAAF86F3DC1AC15**\r\n\r\n**3971728233B29EAB2C3ADD29924F91B1**\r\n\r\nThe second command to decrypt the Payload file can then be executed using the AES key and the IV. The Payload file from the downloaded notification zip file is needed as well as the 64 character hex key string (AES key) and 32 character hex string (IV).\r\n\r\n```\r\nopenssl aes-256-cbc -d -in PAYLOAD -out PAYLOADOUT.zip -K 7E3908C160BAA886EF8CDE3BE7A00C790B20CCF6473D891A8FAAF86F3DC1AC15 -iv 3971728233B29EAB2C3ADD29924F91B1\r\n```\r\nDecrypting the Payload file:\r\n![Image 2](http://irsgov.github.io/IDES-Data-Preparation-OpenSSL/images/CBC_manual8.png)\r\nFigure 8\r\n\r\n\r\nThis will decrypt the encrypted Payload file giving you the zip file which contains the XML Payload file.\r\n\r\nFolder Contents with the Payload .zip file:\r\n![Image 2](http://irsgov.github.io/IDES-Data-Preparation-OpenSSL/images/CBC_manual9.png)\r\nFigure 9\r\n\r\nThe decrypted .zip file contains the Payload file:\r\n![Image 2](http://irsgov.github.io/IDES-Data-Preparation-OpenSSL/images/CBC_manual10.png)\r\nFigure 10\r\n\r\n\r\n### PLEASE NOTE: THE FOLLOWING SAMPLES ARE FOR ECB DECRYPTION ONLY. THESE ARE PROVIDED FOR LEGACY DECRYPTION AND WILL NOT BE COMPATIBLE WITH IDES AFTER JULY 9, 2016.\r\n### ECB Decryption - Windows Batch Scripting\r\n\r\nThe following code should be placed into a batch file and run in the same folder as the openssl executable. \r\n\r\nThe following files are required and the filename in the batch script will need to be replaced with your filename for each:\r\n\r\nKEYFILE - this is the Key file that will be in the downloaded notification .zip file<br>\r\nPRIVATEKEY - this will be your private key that corresponds to the certificate that was uploaded into IDES<br>\r\nPAYLOAD - this is the Payload file that will be in the downloaded notification .zip file<br>\r\n\r\n\r\nThe first command will decrypt the AES key. The batch code will parse the hex values of the AES key and prepare it for the second command. The second command will use the AES key in hex format and decrypt the Payload file. The output will be the decrypted Payload .zip file.\r\n\r\n```\r\n\r\nopenssl rsautl -decrypt -hexdump -in KEYFILE -inkey PRIVATEKEY -out aeskey.txt\r\n\r\nset /p firstline=< aeskey.txt  \r\nSet line1=%firstline%     \r\nset result1=%line1:~7,48%                           \r\n\r\nSetlocal EnableDelayedExpansion\r\nfor /f \"tokens=* delims= \" %%i in (aeskey.txt) do (\r\nset var=%%i\r\n)\r\nset result2=!var:~7,48!  \r\n\r\nset result1=%result1: =%\r\nset result1=%result1:-=%\r\nset result1=%result1:~0,32%\r\nset result2=%result2: =%\r\nset result2=%result2:-=%\r\nset result2=%result2:~0,32%\r\nset combined=%result1%%result2%\r\n\r\nopenssl aes-256-ecb -d -in PAYLOAD -out PAYLOAD.zip -K %combined%\r\n\r\n\r\n```\r\n \r\n\r\nRunning the batch file:\r\n![Image 11](http://irsgov.github.io/IDES-Data-Preparation-OpenSSL/images/image11.png)\r\nFigure 11\r\n\r\n### ECB Decryption - Linux Shell Scripting\r\n\r\nSimilar to the Windows method above, the following code should be placed into a shell script and run in the same folder as the openssl executable. However, this script will use the cut command to prepare the hex data.\r\n\r\nThe following files are required and the file names passed to the batch script will need to be replaced with your filename for each:\r\n\r\nprivate_key - this will be your private key that corresponds to the certificate that was uploaded into IDES<br>\r\nkey_file - this is the Key file that will be in the downloaded notification .zip file<br>\r\npayload_file - this is the Payload file that will be in the downloaded notification .zip file<br>\r\n\r\n```\r\nprivate_key=$1 #this will be your private key that corresponds to the certificate that was uploaded into IDES\r\n\r\nkey_file=$2 #this is the Key file that will be in the downloaded notification .zip file \r\n\r\npayload_file=$3 #this is the Payload file that will be in the downloaded notification .zip file\r\n\r\noutput_file=$4 #this is the expected output filename, and will be in a .zip format\r\n\r\nhexvalue='openssl rsautl -decrypt -hexdump -inkey $private_key_file -in $random_key_file|cut -c-55|cut -c7-55|tr -d \"\\n\"|sed 's/[ -]//g' ';\r\n\r\nopenssl enc -d -aes-256-ecb -in $payload_file -out $output_file -K $hexvalue\r\n```\r\n\r\nAn example of running the script with the required parameters:\r\n```\r\ndecrypt.sh privatekey.pem 000000.00000.TA.124_Key 000000.00000.TA.840_Payload 000000.00000.TA.840_Payload.zip\r\n\r\n```\r\n\r\n### ECB Decryption - Manual OpenSSL Commands\r\n\r\nIf you are having trouble with an automated method above, there are additional steps you can take to decrypt the AES key, manually get the required hex key data, and use it to decrypt the Payload file. \r\n\r\nThe process is similar to the automated method above. The following files are required and the filename in the batch script will need to be replaced with your filename for each:\r\n\r\nKEYFILE - this is the Key file that will be in the downloaded notification .zip file<br>\r\nPRIVATEKEY - this will be your private key that corresponds to the certificate that was uploaded into IDES<br>\r\nPAYLOAD - this is the Payload file that will be in the downloaded notification .zip file<br>\r\n\r\nThe following code should be run in the same folder as the openssl executable and necessary files.\r\n\r\nDecrypting the AES key:\r\n![Image 2](http://irsgov.github.io/IDES-Data-Preparation-OpenSSL/images/image1.png)\r\nFigure 12\r\n\r\nThe hexdump flag in the command above will output the key in hexadecimal format which is needed to decrypt the Payload file. However, there is extra information that is included that needs to be removed before it can be used in the next command. You can use a text editor to open the aeskey.txt file which is the output of the first command.\r\n\r\nExample Hex data in Notepad++:\r\n![Image 3](http://irsgov.github.io/IDES-Data-Preparation-OpenSSL/images/image2.png)\r\nFigure 13\r\n\r\nExample Hex data in Notepad:\r\n![Image 4](http://irsgov.github.io/IDES-Data-Preparation-OpenSSL/images/image3.png)\r\nFigure 14\r\n\r\nThe hex content that is needed from the file is bolded below. The rest of the information needs to be removed. \r\n\r\n0000 - **e0 a8 fc 55 88 72 3d 5f-24 0f e4 7f 39 42 df a9**   ...U.r=_$...9B..\r\n\r\n0010 - **c4 34 ab 26 bb b2 dc 20-65 59 d7 14 cd b0 15 47**   .4.&... eY.....G\r\n\r\n* With the beginning and ending information stripped out.\r\n\r\n**e0 a8 fc 55 88 72 3d 5f-24 0f e4 7f 39 42 df a9**\r\n\r\n**c4 34 ab 26 bb b2 dc 20-65 59 d7 14 cd b0 15 47**\r\n\r\n* With the spaces and dashes removed and leftover characters together, the end result is a 64 character string. The string must be exactly 64 characters in length:\r\n\r\n**e0a8fc5588723d5f240fe47f3942dfa9c434ab26bbb2dc206559d714cdb01547**\r\n\r\nThe second command to decrypt the Payload file can then be executed using the 64 character hex key string. The Payload file from the downloaded notification zip file is needed as well as the 64 character hex key string.\r\n\r\n```\r\nopenssl aes-256-ecb -d -in 000000.00000.TA.840_Payload -out 000000.00000.TA.840_Payload.zip -K e0a8fc5588723d5f240fe47f3942dfa9c434ab26bbb2dc206559d714cdb01547\r\n```\r\nDecrypting the Payload file:\r\n![Image 5](http://irsgov.github.io/IDES-Data-Preparation-OpenSSL/images/image4.png)\r\nFigure 15\r\n\r\nThis will decrypt the encrypted Payload file giving you the zip file which contains the XML Payload file.\r\n\r\nFolder Contents with the Payload .zip file:\r\n![Image 6](http://irsgov.github.io/IDES-Data-Preparation-OpenSSL/images/image5.png)\r\nFigure 16\r\n\r\n\r\n### Disclaimer:\r\nWe waive copyright and related rights in the work worldwide through the CC0 1.0 Universal public domain dedication. Unless expressly stated otherwise, the person who associated a work with this deed makes no warranties about the work, and disclaims liability for all uses of the work, to the fullest extent permitted by applicable law. When using or citing the work, you should not imply endorsement by the author or the affirmer.\r\n\r\n",
  "google": "",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}